{"ast":null,"code":"import React from \"react\";\nimport CryptoJS from \"crypto-js\";\nconst secretKey = \"my-secret-key@123\";\n\n// export function EnCrypt(dataToEncrypt) {\n//   // Encrypt data using AES encryption\n//   const encryptedData = CryptoJS.AES.encrypt(\n//     JSON.stringify(dataToEncrypt),\n//     secretKey\n//   ).toString();\n\n//   console.log(\"Encrypted Data:\", encryptedData);\n\n//   return encryptedData;\n// }\n\n// export function DeCrypt(dataToDecrypt) {\n//   // Decrypt data using AES decryption\n//   const bytes = CryptoJS.AES.decrypt(dataToDecrypt, secretKey);\n//   const decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n\n//   console.log(\"Decrypted Data:\", decryptedData);\n//   return decryptedData;\n// }\n\nexport const EncryptTransform = {\n  in: data => {\n    const encryptedData = CryptoJS.AES.encrypt(JSON.stringify(data), secretKey).toString();\n    return encryptedData;\n  },\n  out: encryptedData => {\n    const bytes = CryptoJS.AES.decrypt(encryptedData, secretKey);\n    const decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n    return decryptedData;\n  }\n};","map":{"version":3,"names":["React","CryptoJS","secretKey","EncryptTransform","in","data","encryptedData","AES","encrypt","JSON","stringify","toString","out","bytes","decrypt","decryptedData","parse","enc","Utf8"],"sources":["D:/Graana/React/ecom-proj/src/components/crypto.js"],"sourcesContent":["import React from \"react\";\r\nimport CryptoJS from \"crypto-js\";\r\n\r\nconst secretKey = \"my-secret-key@123\";\r\n\r\n// export function EnCrypt(dataToEncrypt) {\r\n//   // Encrypt data using AES encryption\r\n//   const encryptedData = CryptoJS.AES.encrypt(\r\n//     JSON.stringify(dataToEncrypt),\r\n//     secretKey\r\n//   ).toString();\r\n\r\n//   console.log(\"Encrypted Data:\", encryptedData);\r\n\r\n//   return encryptedData;\r\n// }\r\n\r\n// export function DeCrypt(dataToDecrypt) {\r\n//   // Decrypt data using AES decryption\r\n//   const bytes = CryptoJS.AES.decrypt(dataToDecrypt, secretKey);\r\n//   const decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\r\n\r\n//   console.log(\"Decrypted Data:\", decryptedData);\r\n//   return decryptedData;\r\n// }\r\n\r\nexport const EncryptTransform = {\r\n  in: (data) => {\r\n    const encryptedData = CryptoJS.AES.encrypt(\r\n      JSON.stringify(data),\r\n      secretKey\r\n    ).toString();\r\n    return encryptedData;\r\n  },\r\n  out: (encryptedData) => {\r\n    const bytes = CryptoJS.AES.decrypt(encryptedData, secretKey);\r\n    const decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\r\n    return decryptedData;\r\n  },\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,WAAW;AAEhC,MAAMC,SAAS,GAAG,mBAAmB;;AAErC;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,OAAO,MAAMC,gBAAgB,GAAG;EAC9BC,EAAE,EAAGC,IAAI,IAAK;IACZ,MAAMC,aAAa,GAAGL,QAAQ,CAACM,GAAG,CAACC,OAAO,CACxCC,IAAI,CAACC,SAAS,CAACL,IAAI,CAAC,EACpBH,SACF,CAAC,CAACS,QAAQ,CAAC,CAAC;IACZ,OAAOL,aAAa;EACtB,CAAC;EACDM,GAAG,EAAGN,aAAa,IAAK;IACtB,MAAMO,KAAK,GAAGZ,QAAQ,CAACM,GAAG,CAACO,OAAO,CAACR,aAAa,EAAEJ,SAAS,CAAC;IAC5D,MAAMa,aAAa,GAAGN,IAAI,CAACO,KAAK,CAACH,KAAK,CAACF,QAAQ,CAACV,QAAQ,CAACgB,GAAG,CAACC,IAAI,CAAC,CAAC;IACnE,OAAOH,aAAa;EACtB;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}